function formatChange(value){function red(input){return `<font style="color: red;"><i class="bi bi-caret-down-fill"></i> ${input}%</font>`}
function green(input){return `<font style="color: green;"><i class="bi bi-caret-up-fill"></i> ${input}%</font>`}
if(value>0){return green(value.toFixed(2))}else if(value<0){return red(value.toFixed(2))}else{return'<span>'+value.toFixed(2)+'%</span>'}}
function addCommas(number){const parts=number.toString().split(".");const integerWithCommas=parts[0].replace(/\B(?=(\d{3})+(?!\d))/g,",");return parts.length>1?integerWithCommas+"."+parts[1]:integerWithCommas}
function smartRound(num){if(Math.abs(num)>=1){return Number(num.toFixed(2))}else{const str=num.toExponential();const match=str.match(/e-(\d+)/);const exponent=match?parseInt(match[1]):0;const sigDigits=4;return Number(num.toPrecision(sigDigits))}}
function drawLineGraph(element,data,containerWidth,containerHeight){if(!data||data.length<2)return;function renderGraph(){element.innerHTML="";const canvas=document.createElement('canvas');canvas.width=containerWidth;canvas.height=containerHeight;element.appendChild(canvas);const ctx=canvas.getContext('2d');const maxValue=Math.max(...data);const minValue=Math.min(...data);const range=maxValue-minValue||1;const xScale=canvas.width/(data.length-1);const yScale=canvas.height/range;const points=data.map((val,i)=>({x:i*xScale,y:canvas.height-(val-minValue)*yScale}));const gradient=ctx.createLinearGradient(0,0,0,canvas.height);const baseColor=data[0]<data[data.length-1]?'rgba(0, 128, 0, ':'rgba(255, 0, 0, ';gradient.addColorStop(0,baseColor+'0.2)');gradient.addColorStop(1,baseColor+'0)');ctx.beginPath();ctx.moveTo(points[0].x,points[0].y);for(let i=1;i<points.length-1;i++){const xc=(points[i].x+points[i+1].x)/2;const yc=(points[i].y+points[i+1].y)/2;ctx.quadraticCurveTo(points[i].x,points[i].y,xc,yc)}
ctx.lineTo(points[points.length-1].x,points[points.length-1].y);ctx.lineTo(points[points.length-1].x,canvas.height);ctx.lineTo(points[0].x,canvas.height);ctx.closePath();ctx.fillStyle=gradient;ctx.fill();ctx.beginPath();ctx.moveTo(points[0].x,points[0].y);for(let i=1;i<points.length-1;i++){const xc=(points[i].x+points[i+1].x)/2;const yc=(points[i].y+points[i+1].y)/2;ctx.quadraticCurveTo(points[i].x,points[i].y,xc,yc)}
ctx.lineTo(points[points.length-1].x,points[points.length-1].y);ctx.strokeStyle=data[0]<data[data.length-1]?'green':'red';ctx.lineWidth=2;ctx.stroke()}
requestAnimationFrame(renderGraph);let resizeTimeout;window.addEventListener('resize',()=>{clearTimeout(resizeTimeout);resizeTimeout=setTimeout(renderGraph,150)})}
function drawLineGraphTable(element,data,containerWidth,containerHeight){if(!data||data.length<2)return;function renderGraph(){element.innerHTML="";const canvas=document.createElement('canvas');canvas.width=containerWidth;canvas.height=containerHeight;element.appendChild(canvas);const ctx=canvas.getContext('2d');const maxValue=Math.max(...data);const minValue=Math.min(...data);const range=maxValue-minValue||1;const xScale=canvas.width/(data.length-1);const yScale=canvas.height/range;const points=data.map((val,i)=>({x:i*xScale,y:canvas.height-(val-minValue)*yScale}));ctx.beginPath();ctx.moveTo(points[0].x,points[0].y);for(let i=1;i<points.length-1;i++){const xc=(points[i].x+points[i+1].x)/2;const yc=(points[i].y+points[i+1].y)/2;ctx.quadraticCurveTo(points[i].x,points[i].y,xc,yc)}
ctx.lineTo(points[points.length-1].x,points[points.length-1].y);ctx.strokeStyle=data[0]<data[data.length-1]?'green':'red';ctx.lineWidth=1;ctx.stroke()}
requestAnimationFrame(renderGraph);let resizeTimeout;window.addEventListener('resize',()=>{clearTimeout(resizeTimeout);resizeTimeout=setTimeout(renderGraph,150)})}
function openNav(){document.getElementById("myNav").style.width="100%"}
function closeNav(){document.getElementById("myNav").style.width="0%"}
function capitalizeFirstLetter(val){return String(val).charAt(0).toUpperCase()+String(val).slice(1)}
function fadeInEffect(duration=1000,ele){const element=document.querySelector(ele);if(!element)return;let opacity=0;const start=performance.now();function animate(time){const elapsed=time-start;opacity=Math.min(elapsed/duration,1);element.style.opacity=opacity;if(opacity<1){requestAnimationFrame(animate)}}
element.style.display='block';element.style.opacity=0;requestAnimationFrame(animate)}
function formatTimestamp(ts){const date=new Date(ts*1000);const day=date.getDate();const month=date.toLocaleString('en-US',{month:'short'});const hours=String(date.getHours()).padStart(2,'0');const minutes=String(date.getMinutes()).padStart(2,'0');return `${day} ${month} at ${hours}:${minutes}`}
function renderMiniGraphs(data,timeInterval){Object.entries(data).forEach(([key,val],index)=>{const canvas=document.getElementById(`graph-${index}`);if(canvas){drawLineGraphTable(canvas,val[timeInterval].candles,200,40)}})}
function updateButtons(swiper){const prevBtn=swiper.navigation.prevEl;const nextBtn=swiper.navigation.nextEl;if(swiper.isBeginning){prevBtn.style.display='none';nextBtn.style.display='flex'}else if(swiper.isEnd){prevBtn.style.display='flex';nextBtn.style.display='none'}else{prevBtn.style.display='flex';nextBtn.style.display='flex'}}
function initRangeBars(){document.querySelectorAll('.range-bar').forEach(bar=>{const price=parseFloat(bar.dataset.price);const low=parseFloat(bar.dataset.low);const high=parseFloat(bar.dataset.high);const red=bar.querySelector('.red');const green=bar.querySelector('.green');const marker=bar.querySelector('.marker');const range=high-low;const pricePos=price-low;const percent=range>0?(pricePos/range)*100:50;red.style.width=`${percent}%`;green.style.width=`${100 - percent}%`;green.style.left=`${percent}%`;marker.style.left=`${percent}%`})}
function setScreenerVisibility(config){const table=$('#table1').DataTable();const defaults={5:!1,6:!1,7:!1,8:!1,9:!1,10:!1,11:!1,12:!1,13:!1};for(const col in defaults){table.column(Number(col)).visible(defaults[col],!1)}
for(const col in config){table.column(Number(col)).visible(config[col],!1)}
table.columns.adjust().draw()}
function loadBasicScreener(){setScreenerVisibility({8:!0})}
function loadHybridScreener(){setScreenerVisibility({5:!0,6:!0,7:!0})}
function loadAdvancedScreener(){setScreenerVisibility({5:!0,6:!0,7:!0,12:!0,13:!0})}
function loadDefaultScreener(){setScreenerVisibility({8:!0,9:!0,10:!0,11:!0})}
function loadSavedScreener(){if(localStorage.getItem("SavedOnly")=="true"){const table=$('#table1').DataTable();$.fn.dataTable.ext.search.pop();table.draw();$.fn.dataTable.ext.search.push(function(settings,data,dataIndex){const row=table.row(dataIndex).node();return $(row).find('.star-yellow').length>0});table.draw()}else{const table=$('#table1').DataTable();$.fn.dataTable.ext.search.pop();table.draw()}}
function interpretSignalsColored(signals){const buy=signals.buy;const sell=signals.sell;const diff=buy-sell;let sentiment="Neutral";let color="gray";if(diff>=2){sentiment="Bullish";color="green"}else if(diff<=-2){sentiment="Bearish";color="red"}
return `<span style="color: ${color};">${sentiment}</span>`}
function loadMode(mode){switch(mode){case "Statistics":loadHybridScreener();break;case "Default":loadDefaultScreener();break;case "Minimalist":loadBasicScreener();break;case "Advanced":loadAdvancedScreener();break;default:loadDefaultScreener();break}}
